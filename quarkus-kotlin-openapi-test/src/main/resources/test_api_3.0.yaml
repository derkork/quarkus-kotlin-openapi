openapi: 3.0.2
servers:
  - url: /v3
info:
  description: our test interface
  version: 1.0.17
  title: Test Interface
paths:
  /health:
    get:
      responses:
        200:
          description: Nacksch

  /health/detail:
    get:
      responses:
        200:
          description: Is Pflicht
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHealthDetailResponse"

  /movies:
    get:
      operationId: findMovies
      parameters:
        - name: genre
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Genre"
        - name: score
          in: query
          schema:
            $ref: "#/components/schemas/Score"
        - name: title
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
        '400':
          $ref: "#/components/responses/BadRequestResponse"
        default:
          $ref: "#/components/responses/BadRequestResponse"

    post:
      operationId: addMovie
      requestBody:
        $ref: "#/components/requestBodies/NewMovie"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"

  /movies/{movieId}:
    parameters:
      - $ref: "#/components/parameters/MovieId"

    get:
      operationId: getMovie
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

    delete:
      operationId: deleteMovie
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

    put:
      operationId: modifyMovie
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseMovie"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

  /movies/{movieId}/ratings:
    get:
      operationId: getRatings
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rating"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

    post:
      operationId: addRating
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rating"
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

  /movies/{movieId}/ratings/{ratingId}:
    delete:
      operationId: deleteRating
      parameters:
        - name: movieId
          in: path
          description: movieId
          required: true
          schema:
            $ref: "#/components/schemas/Id"

        - name: ratingId
          in: path
          description: ratingId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidInputError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"
components:
  schemas:
    Id:
      type: string
      format: uuid

    Duration:
      type: integer
      minimum: 1

    Score:
      type: number
      format: double
      minimum: 1
      maximum: 10

    IdAware:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
      required:
        - id

    Age:
      type: integer
      enum:
        - 5
        - 10
        - 20

    Genre:
      type: string
      enum:
        - action
        - adventure
        - comedy
        - crime
        - fantasy
        - historical
        - horror
        - romance
        - satire
        - scifi
        - thriller
        - other
      default: scifi

    Cast:
      oneOf:
        - $ref: "#/components/schemas/Person"
        - $ref: "#/components/schemas/Animal"
     # discriminator:
      #  propertyName: kind

    Person:
      type: object
      nullable: true
      properties:
        whiskyAge:
          $ref: "#/components/schemas/Age"
        kind:
          type: string
        character:
          type: string
        actor:
          type: string
      required:
        - character
        - actor
        - kind

    Animal:
      type: object
      properties:
        character:
          type: string
        kind:
          type: string
        furColor:
          type: string
      required:
        - character
        - kind
        - furColor

    AdditionalInformation:
      type: object
      properties:
        budget:
          type: integer
        revenue:
          type: integer

    BaseMovie:
      type: object
      properties:
        title:
          type: string
        releaseDate:
          type: string
          format: date
        genres:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
        duration:
          $ref: "#/components/schemas/Duration"
        cast:
          type: array
          items:
            $ref: "#/components/schemas/Cast"
        additionalInformation:
          $ref: "#/components/schemas/AdditionalInformation"
      required:
        - title
        - releaseDate
        - genres
        - duration
        - cast

    Rating:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
          readOnly: true
        source:
          type: string
        score:
          $ref: "#/components/schemas/Score"
      required:
        - source
        - score
        - id

    Movie:
      type: object
      allOf:
        - $ref: "#/components/schemas/IdAware"
        - $ref: "#/components/schemas/BaseMovie"
        - properties:
            totalScore:
              $ref: "#/components/schemas/Score"

    InvalidInputError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      required:
        - errors

    ApplicationError:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    GetHealthDetailResponse:
      type: object
      properties:
        status:
          type: string
        version:
          type: string

  parameters:
    # referenced like this on path or method level
    # parameters:
    #   - $ref: "#/components/parameters/MovieId"
    MovieId:
      name: movieId
      in: path
      description: movieId
      required: true
      schema:
        $ref: "#/components/schemas/Id"

  securitySchemes: { }
  requestBodies:
    # referenced like this on a method level
    # requestBody:
    #   $ref: "#/components/requestBodies/NewMovie"
    NewMovie:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseMovie"

  responses:
    # referenced like this on a method level
    # responses:
    #   '400':
    #     $ref: "#/components/requestBodies/NewMovie"
    BadRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvalidInputError"


  headers: { }
