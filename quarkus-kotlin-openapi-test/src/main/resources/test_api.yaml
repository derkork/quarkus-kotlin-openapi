openapi: 3.0.2
servers:
  - url: /v3
info:
  description: our test interface
  version: 1.0.17
  title: Test Interface
paths:
  /user:
    get:
      operationId: find
      parameters:
        - name: tag
          in: query
          schema:
            type: array
            items:
              type: string
        - name: status
          in: query
          description: status
          required: false
          schema:
            $ref: "#/components/schemas/UserStatus"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
    post:
      operationId: add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseUser"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

  /user/{userId}:
    get:
      operationId: get
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"
    delete:
      operationId: delete
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"
    put:
      operationId: modify
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseUser"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationError"

components:
  schemas:
    Id:
      type: string
      format: uuid

    IdAware:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
      required:
        - id

    BaseUser:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
        status:
          $ref: "#/components/schemas/UserStatus"
        address:
          $ref: "#/components/schemas/Address"
        tags:
          type: array
          items:
            type: string
        fallbackAddresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
      required:
        - name
        - age
        - status
        - address

    User:
      type: object
      allOf:
        - $ref: "#/components/schemas/IdAware"
        - $ref: "#/components/schemas/BaseUser"

    UserStatus:
      type: string
      enum:
        - available
        - blocked
      default: available

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
      required:
        - street
        - city
        - state
        - zip

    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      required:
        - errors

    ApplicationError:
      type: object
      properties:
        message:
          type: string
      required:
        - message
