openapi: 3.1.0
info:
  title: Filestore
  version: 1.0.0
tags:
  - name: plain
  - name: json

paths:
  /features/validation/numberValidation:
    post:
      tags:
        - validation
      operationId: numberValidation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationTest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationTest'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/misc/unknownStatusCode:
    get:
      tags:
        - misc
      operationId: unknownStatusCode
      responses:
        '422':
          description: Unprocessable entity

  /features/misc/unknownStatusCode2:
    get:
      tags:
        - misc
      operationId: unknownStatusCode2
      responses:
        '422':
          description: Unprocessable entity
        'default':
          description: Unprocessable entity

  /features/misc/objectExtensionTest:
    get:
      tags:
        - misc
      operationId: objectExtensionTest
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseObjectExtension'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseObject'

  /features/parameters/test1:
    get:
      tags:
        - parameters
      operationId: parametersTest1
      parameters:
        - name: first
          in: query
          required: true
          schema:
            type: string
        - name: second
          in: query
          required: false
          schema:
            type: integer
        - name: X-THIRD-HEADER
          in: header
          required: false
          schema:
            type: integer
      responses:
        '204':
          description: Ok
          headers:
            X-FIRST-HEADER:
              required: true
              schema:
                type: string
            X-SECOND-HEADER:
              schema:
                type:
                  - integer
                  - 'null'
            X-THIRD-HEADER:
              required: false
              schema:
                type: integer
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/parameters/test2:
    get:
      tags:
        - parameters
      operationId: parametersTest2
      parameters:
        - name: first
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
        - name: X-SECOND-HEADER
          in: header
          required: false
          schema:
            type: array
            items:
              type:
                - integer
                - 'null'
      responses:
        '204':
          description: Ok
          headers:
            X-FIRST-HEADER:
              required: true
              schema:
                type: array
                items:
                  type: string
            X-SECOND-HEADER:
              required: false
              schema:
                type: array
                items:
                  type:
                    - integer
                    - 'null'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/plain/optional/enum:
    post:
      tags:
        - plain
      operationId: plainOptionalEnum
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/SimpleEnumOptional'
      responses:
        '200':
          description: Ok
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SimpleEnumOptional'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/plain/required/enum:
    post:
      tags:
        - plain
      operationId: plainRequiredEnum
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/SimpleEnum'
      responses:
        '200':
          description: Ok
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SimpleEnum'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/json/optional/object:
    post:
      tags:
        - json
      operationId: jsonOptionalObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleObjectOptional'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleObjectOptional'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/json/required/object:
    post:
      tags:
        - json
      operationId: jsonRequiredObject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleObject'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleObject'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/form/required/object:
    post:
      tags:
        - form
      operationId: formRequiredObject
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SimpleForm'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleForm'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/split/test1:
    post:
      tags:
        - split
      operationId: splitTest1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndirectSplit'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndirectSplit'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/split/test2:
    post:
      tags:
        - split
      operationId: splitTest2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteOnlyObject'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyObject'
        '400':
          $ref: '#/components/responses/OperationError400'


  /features/oneOf/test1:
    post:
      tags:
        - oneOf
      operationId: oneOfTest1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneOfWithoutDiscriminator'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfWithoutDiscriminator'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/oneOf/test2:
    post:
      tags:
        - oneOf
      operationId: oneOfTest2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneOfWithDiscriminator'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfWithDiscriminator'
        '400':
          $ref: '#/components/responses/OperationError400'

  /features/oneOf/test3:
    post:
      tags:
        - oneOf
      operationId: oneOfTest3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneOfWithDiscriminatorAndMapping'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfWithDiscriminatorAndMapping'
        '400':
          $ref: '#/components/responses/OperationError400'

components:

  schemas:
    ValidationTest:
      type: object
      properties:
        longProperty:
          type: number
          format: int64
          minimum: 5
          maximum: 10
        uintProperty:
          type: number
          format: uint32
          exclusiveMinimum: 5
          exclusiveMaximum: 10
      required:
        - longProperty
        - uintProperty

    SimpleEnum:
      type: string
      enum:
        - first
        - second

    SimpleEnumOptional:
      $ref: '#/components/schemas/SimpleEnum'
      type:
        - 'null'

    SimpleObject:
      type: object
      properties:
        nameOptional:
          type: string
          default: 'i am optional'
        nameRequired:
          type: string
          default: 'i am required'
        statusOptional:
          $ref: '#/components/schemas/SimpleEnum'
        statusRequired:
          $ref: '#/components/schemas/SimpleEnum'
        itemsOptional:
          type: array
          items:
            type: string
        itemsRequired:
          type: array
          items:
            type: string
      required:
        - nameRequired
        - statusRequired
        - itemsRequired

    SimpleObjectOptional:
      $ref: '#/components/schemas/SimpleObject'
      type:
        - 'null'

    SimpleForm:
      type: object
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/SimpleEnum'
      required:
        - name
        - status

    ReadOnlyType:
      type: string
      readOnly: true

    ObjectWithReadOnlyProperty:
      type: object
      properties:
        readOnlyProperty:
          $ref: '#/components/schemas/ReadOnlyType'
        normalProperty:
          type: string
      required:
        - readOnlyProperty
        - normalProperty

    IndirectSplit:
      type: 'null'
      $ref: '#/components/schemas/ObjectWithReadOnlyProperty'

    ReadOnlyObject:
      type: object
      properties:
        readOnlyProperty:
          type: string
          readOnly: true
        normalProperty:
          type: string
      required:
        - readOnlyProperty
        - normalProperty

    WriteOnlyObject:
      type: object
      properties:
        writeOnlyProperty:
          type: string
          writeOnly: true
        normalProperty:
          type: string
      required:
        - writeOnlyProperty
        - normalProperty

    OneOfWithoutDiscriminator:
      oneOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Song'
          type:
            - 'null'
          x-container-model-name: OneOfWithoutDiscriminatorSong

    OneOfWithDiscriminator:
      oneOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Song'
      discriminator:
        propertyName: kind

    OneOfWithDiscriminatorAndMapping:
      oneOf:
        - $ref: '#/components/schemas/Book'
        - $ref: '#/components/schemas/Song'
      discriminator:
        propertyName: kind
        mapping:
          booooook: '#/components/schemas/Book'

    Book:
      type: object
      properties:
        title:
          type: string
        pages:
          type: number
          format: int32
        kind:
          type: string
      required:
        - title
        - pages
        - kind

    Song:
      type: object
      properties:
        title:
          type: string
        duration:
          type: number
          format: int32
        kind:
          type: string
      required:
        - title
        - duration
        - kind

    BaseObject:
      properties:
        prop1:
          type: string
        prop2:
          type: string
      required:
        - prop1

    BaseObjectExtension:
      $ref: '#/components/schemas/BaseObject'
      required:
        - prop2

    OperationError:
      type: object
      properties:
        messages:
          type: array
          items:
            type: string
      required:
        - messages

  responses:
    OperationError400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationError'
